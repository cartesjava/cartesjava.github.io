<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cartes Java</title>
    <link>https://cartesjava.github.io/</link>
    <description>Recent content on Cartes Java</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-ca</language><atom:link href="https://cartesjava.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://cartesjava.github.io/efficacite/temps/partie02/ChercheurNaif/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cartesjava.github.io/efficacite/temps/partie02/ChercheurNaif/</guid>
      <description>int trouverIndicePourValeur(tableau, valeur):
 POUR TOUS les éléments el du tableau:  SI el est égal à la valeur cherchée:  mémoriser l&amp;rsquo;indice i de l&amp;rsquo;élément el     retourner le dernier indice i mémorisé  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://cartesjava.github.io/efficacite/temps/partie02/TrieurNaif/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cartesjava.github.io/efficacite/temps/partie02/TrieurNaif/</guid>
      <description>Tableau&amp;lt;C&amp;gt; trier(Tableau&amp;lt;C&amp;gt; entree):
 CRÉER un tableau resultat vide TANT QUE le tableau entree n&amp;rsquo;est pas vide  appeler valeurMinimale et mémoriser la valeur de retour retirer cette valeur du tableau entree ajouter cette valeur à la fin du tableau resultat   retourner le tableau resultat  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://cartesjava.github.io/efficacite/temps/partie02/TrieurNaif_valeurMinimale/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cartesjava.github.io/efficacite/temps/partie02/TrieurNaif_valeurMinimale/</guid>
      <description>Valeur obtenirValeurMinimale(tableau):
 considérer que le premier élément du tableau est la valeur minimale POUR TOUS les éléments el du tableau:  SI el est plus petit que la valeur minimale courante:  mémoriser el comme la nouvelle valeur minimale courante     retourner la valeur minimale  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://cartesjava.github.io/efficacite/temps/partie02/TriFusion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cartesjava.github.io/efficacite/temps/partie02/TriFusion/</guid>
      <description>Tableau trier(Tableau entree):
 CRÉER un tableau resultat vide SI entree contient un seul élément ou moins:  copier entree dans resultat   SINON:  diviser le tableau entree en deux sous-tableaux égaux appeler trier() pour trier chaque sous-tableau appeler fusionner() pour fusionner les deux sous-tableaux copier le tableau fusionné dans resultat   retourner le tableau resultat  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://cartesjava.github.io/efficacite/temps/partie02/TriFusion_fusionner/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cartesjava.github.io/efficacite/temps/partie02/TriFusion_fusionner/</guid>
      <description>Tableau fusionner(Tableau gauche, Tableau droite):
 CRÉER un tableau resultat vide TANT QUE gauche n&amp;rsquo;est pas vide ET QUE droite n&amp;rsquo;est pas vide:  SI le premier élément de gauche est plus petit que le premier élément de droite:  obtenir le premier élément de gauche retirer cet élément à gauche ajouter cet élément à la fin de resultat   SINON  obtenir le premier élément de droite retirer cet élément à droite ajouter cet élément à la fin de resultat     SI gauche n&amp;rsquo;est pas vide:  retirer chaque élément de gauche et les ajouter dans l&amp;rsquo;ordre à la fin de resultat   SINON:  retirer chaque élément de droite et les ajouter dans l&amp;rsquo;ordre à la fin de resultat   retourner le tableau resultat  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://cartesjava.github.io/encadres/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cartesjava.github.io/encadres/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Bilan juin 2022</title>
      <link>https://cartesjava.github.io/preface/bilan_juin_2022/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cartesjava.github.io/preface/bilan_juin_2022/</guid>
      <description>Bilan juin 2022 #  Projets étudiants #    De gauche à droite:
 Zein-El-Abdin Hazimeh Mathieu Bergeron Marlond Augustin Adrien Joséphine-Olivier       Crédit photo: Marlond Augustin Les participants ont signé un formulaire de consentement concernant la reproduction des trois photos ci-haut.  Fonctionalités implantées #  Interface de base #    NOTES:
 Des améliorations à l&amp;rsquo;interface sont à venir (projet de Zein Hazimeh)  Validation interactive du code #  Comparaison du code étudiant (erreur à l&amp;rsquo;étape 22):</description>
    </item>
    
    <item>
      <title>Dessiner un tableau d&#39;objets</title>
      <link>https://cartesjava.github.io/modelisation/java/dessiner_tableau/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cartesjava.github.io/modelisation/java/dessiner_tableau/</guid>
      <description>Dessiner un tableau d&amp;rsquo;objets #  Visualiser les objets #  Exemple 1 #  Exemple 2 #  Comprendre l&amp;rsquo;effet d&amp;rsquo;instructions typiques #  Accéder à une valeur #  Example 1 #    Objets au départ Instructions Résultat      memoireA.getNumero(); memoireA.getSorte();   5 &amp;#34;TREFLE&amp;#34;    Example 2 #    Objets au départ Instructions Résultat      cartes[2].</description>
    </item>
    
    <item>
      <title>Visualiser les références multiples</title>
      <link>https://cartesjava.github.io/modelisation/java/references_multiples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cartesjava.github.io/modelisation/java/references_multiples/</guid>
      <description>Visualiser les références multiples #  Typiquement, on va copier une référence à un objet, plutôt que déplacer l&amp;rsquo;objet.
   Typique   Plus rare     memoireA = cartes[0];   memoireA = cartes[0]; cartes[0] = null;    Le résultat est qu&amp;rsquo;on a des références multiples: plusieurs références vers le même objet.
Si on visualise du code typique avec les cartes, on va visualiser les références multiples en affichant plusieurs copies d&amp;rsquo;une carte.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://cartesjava.github.io/intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cartesjava.github.io/intro/</guid>
      <description>Introduction #  </description>
    </item>
    
    <item>
      <title>Efficacité en espace</title>
      <link>https://cartesjava.github.io/efficacite/espace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cartesjava.github.io/efficacite/espace/</guid>
      <description>Efficacité en espace #  </description>
    </item>
    
    <item>
      <title>Arbre générique</title>
      <link>https://cartesjava.github.io/arbres/generique/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cartesjava.github.io/arbres/generique/</guid>
      <description>Arbre générique #  </description>
    </item>
    
    <item>
      <title>Arbre binaire</title>
      <link>https://cartesjava.github.io/arbres/binaire/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cartesjava.github.io/arbres/binaire/</guid>
      <description>Arbre binaire #  </description>
    </item>
    
    <item>
      <title>Conclusion</title>
      <link>https://cartesjava.github.io/conclusion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cartesjava.github.io/conclusion/</guid>
      <description>Conclusion #  </description>
    </item>
    
    <item>
      <title>Mappage avec arbre</title>
      <link>https://cartesjava.github.io/mappage/arbre/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cartesjava.github.io/mappage/arbre/</guid>
      <description>Mappage avec arbre #    On peut implanter un map avec un arbre binaire de recherche
  Il faut que chaque noeud soit une paire
  Considérer le map {0:&#39;w&#39;, 1:&#39;h&#39;, 2:&#39;t&#39;, 3:&#39;d&#39;, 4:&#39;a&#39;, 5:&#39;z&#39;, 6:&#39;h&#39;}
  Voici l&amp;rsquo;arbre avec uniquement les clés:
   RAPPEL:  chaque noeud a au plus deux enfants à gauche il y a toujours des valeurs plus petites à droite il y a toujours des valeurs plus grandes      Pour faire un map, il faut mémoriser des paires clé/valeur</description>
    </item>
    
  </channel>
</rss>
