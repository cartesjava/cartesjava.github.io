[{"id":0,"href":"/preface/bilan_juin_2022/","title":"Bilan juin 2022","section":"Préface","content":"[NODE NOT FOUND: bilans.juin2022]\n"},{"id":1,"href":"/preface/bilan_octobre_2022/","title":"Bilan octobre 2022","section":"Préface","content":"Bilan octobre 2022 #  Avancement actuel #  Brouillons sur codelescartes.ca\n Présentation de l\u0026rsquo;approche Comment modifier ce manuel  Matériel de mon cours 3C6 développé pour ce projet et qu\u0026rsquo;il reste à inclure dans le manuel codelescartes.ca\n Procédure pour déplacer/décaler des cartes Modéliser des cartes  graphe d\u0026rsquo;objets   Récursivité  modélisation de la séquence de Fibonacci    Matériel qui existait déjà pour mon cours 3C6 et qu\u0026rsquo;il reste à inclure dans le manuel codelescartes.ca\n Structures de données en Java Structures de données en JSON  Ressources trouvées par Valérie Jacques #  Les ressources ci-bas pourront servir d\u0026rsquo;inspiration pour le manuel:\nAlgorithms and Data Structures With Application to Graphics and Geometry(2011) de Jurg Nievergelt et Klaus Hinrichs ;\u0026nbsp;Data Structures : {fundamental tools}(revisé en 2020) de Alfred V. Aho, Jeffrey D. Ullman et al. [Wikibooks] ;\u0026nbsp;Introduction to Programming Using Java (8 éd., 2022) de David J. Eck ;\u0026nbsp;Java, Java, Java : Object-Oriented Problem Solving (2017) de Ralph Morelli et Ralph Walde ;\u0026nbsp;Programming Fundamentals : A Modular Structured Approach (2e éd., 2018) de Kenneth Leroy Busbee et Dave Braunschweig ;\u0026nbsp;Think Java : How to Think Like a Computer Scientist (2e éd., 2020) de Chris Mayfield et Allen Downey.\u0026nbsp; Pour l\u0026rsquo;instant, il n\u0026rsquo;est pas prévu de traduire des sections des ressources ci-haut dans le but des intégrer au présent manuel.\nPour finaliser le projet #    L\u0026rsquo;objectif pour février 2023 est de rédiger 25% du manuel initialement prévu, soit environs 50 pages\n  L\u0026rsquo;objectif demeure réaliste\n le matériel créé pour ce projet compte déjà envrions 20 pages le matériel que j\u0026rsquo;ai déjà compte pour un autre 20 pages    À noter que cette portion du manuel risque d\u0026rsquo;être partiellement réécrite puisque l\u0026rsquo;approche a encore besoin d\u0026rsquo;être peaufinée\n  Impressions et réflexions #  Ce qui fonctionne bien #    C\u0026rsquo;est très aggréable d\u0026rsquo;utiliser les cartes surdimensionnées pour expliquer une procédure au tableau blanc:\ncrédit photo: Mikael Tardif\n  C\u0026rsquo;est aussi très aggréable de faire des séances de théorie 100% au tableau blanc, sans utiliser le projecteur\n  Les étudiant.es semblent apprécier l\u0026rsquo;utilisation de cartes à jouer et adhérent bien à l\u0026rsquo;idée de faire des entrevues formatives\n (durant l\u0026rsquo;entrevue formative, l\u0026rsquo;étudiant.e démontre sa compréhension de la théorie avec des cartes ou en dessinant un schéma sur papier)    Les étudiant.es semblent beaucoup apprécier l\u0026rsquo;outil de validation, en particulier le fait que l\u0026rsquo;outil génère des visualisation à partir de leur code. P.ex.\ncartes = new MaCarte[] {new MaCarte(1, Sorte.CARREAU),  null,  new MaCarte(1, Sorte.COEUR)};  memoireA = null; memoireB = new MaCarte(1, Sorte.TREFLE); i = 1; aDeplacer = 2;    Ce qui reste à peaufiner #    Tout! L\u0026rsquo;approche a besoin de «vivre un peu». P.ex.\n plusieurs étudiant.es ont pris du temps à réaliser que l\u0026rsquo;outil de validation générait des visualisations à partir de leur code. Il faudra trouver des façons de présenter cet aspect plus directement (d\u0026rsquo;autant plus que c\u0026rsquo;est un aspect très apprécié une fois découvert!). les étudiant.es ont trouvé facile de trier des cartes, mais plus difficile de traduire en code la procédure. Je pense que je devrai fournir plus d\u0026rsquo;exemples plus rapidement afin de pratiquer cette «traduction».    Malheureusement, pour l\u0026rsquo;instant, créer un nouvel exemple de visualisation est difficle et long. Je dois écrire beaucoup de code pour créer les visualisations et ces dernières doivent quand même être capturées à la main avec un outil de capture d\u0026rsquo;écran. Certains graphes d\u0026rsquo;objets doivent aussi être retravailler à la main, p.ex. ci-bas pour y inclure la variable nouvelleTete\n  Trois «intuitions de programmeur» à mieux enseigner #    Construire et imaginer un graphe d\u0026rsquo;objets\n  Utiliser une variable de type «curseur» pour pointer sur différents objets d\u0026rsquo;un graphe d\u0026rsquo;objets durant l\u0026rsquo;exécution du programme\n  Utiliser des appels récursifs pour construire un graphe d\u0026rsquo;objet\n  "},{"id":2,"href":"/preface/","title":"Préface","section":"Code les cartes!","content":"Préface #  "},{"id":3,"href":"/procedures/windows/eclipse/","title":"Procédure: installer Eclipse","section":"Windows","content":"Procédure: installer Eclipse #   Rappel: ne pas effectuer cette étape sur un Windows du Collège     Recomandé: désinstaller toute ancienne version d\u0026rsquo;Eclipse\n  Installer Eclipse (version 2022-06 ou plus récent)\n Visiter https://www.eclipse.org/downloads/ Télécharger en cliquant sur Download x86_64 Exécuter eclipse-inst-win64.exe Installer Eclipse IDE for Java Developers avec les options par défaut    Configurer Eclipse #   --   Je démarre Eclipse\n Je choisi mon WORKSPACE, p.ex.  Z:\\eclipse-workspace (Windows du Collège) C:\\Users\\PRENOM_NOM\\eclipse-workspace (Mon Windows)      Je m\u0026rsquo;assure que Eclipse utilise le JDK 11\n  Window =\u0026gt; Preferences\n  Java =\u0026gt; Installed JREs\n    Idéallement, Eclipse utilise uniquement le JDK 11\n  Si j\u0026rsquo;en ai pas besoin, je fait Remove sur tous les JDK sauf 11\n  Si le JDK 11 n\u0026rsquo;est pas là, je l\u0026rsquo;ajoute:\n Add =\u0026gt; Standard VM =\u0026gt; Next Sélectionner le répertoire racine du JDK, p.ex:  C:\\Program Files\\Java\\jdk-11.XXX   Finish Apply and Close    Je m\u0026rsquo;assure que le JDK 11 est le défaut (en gras)\n    "},{"id":4,"href":"/procedures/windows/git/","title":"Procédure: installer Git","section":"Windows","content":"Procédure: installer Git #   Rappel: ne pas effectuer cette étape sur un Windows du Collège    Visiter https://git-scm.com/download/win Télécharger et et exécuter Git-2.37.2.2-64-bit.exe Installer avec les options par défaut, sauf:  Recommandé: choisir nano comme éditeur plutôt que vim:       "},{"id":5,"href":"/procedures/windows/jdk11/","title":"Procédure: installer le JDK 11","section":"Windows","content":"Procédure: installer le JDK 11 #    Si ce n\u0026rsquo;est pas déjà fait, créer un compte Oracle: https://profile.oracle.com/myprofile/account/create-account.jspx\n  Visiter https://www.oracle.com/java/technologies/javase/jdk11-archive-downloads.html\n  Télécharger la version Windows x64 Installer\n jdk-11.0.16_windows-x64_bin.exe    Accepter la licence et je clique sur Download\n  Exécuter jdk-11.0.16_windows-x64_bin.exe\n  Installer avec les options par défaut\n  "},{"id":6,"href":"/procedures/gitlab/inscription/","title":"Procédure: s'inscrire à GitLab","section":"Gitlab","content":"Procédure: s\u0026rsquo;inscrire à GitLab #    Visiter https://gitlab.com\n Cliquer sur Register    Remplir le formulaire\n  Cliquer sur Je ne suis pas un robot\n  Cliquer sur Register\n    Attendre le courriel de confirmation\n Cliquer sur le lien dans le courriel pour confirmer l\u0026rsquo;inscription    "},{"id":7,"href":"/intro/","title":"Introduction","section":"Code les cartes!","content":"Introduction #  "},{"id":8,"href":"/approche/","title":"Présentation de l'approche","section":"Code les cartes!","content":"[NODE NOT FOUND: approche.root]\n"},{"id":9,"href":"/approche/jeux_de_cartes/","title":"Utilisation des jeux de cartes","section":"Présentation de l'approche","content":"Utilisation des jeux de cartes #  Limites de la visualisation avec un jeu de carte #  "},{"id":10,"href":"/approche/ntro/","title":"Cadriciel Ntro","section":"Présentation de l'approche","content":"Cadriciel Ntro #  "},{"id":11,"href":"/modelisation/","title":"Modéliser des jeux de cartes","section":"Code les cartes!","content":"Modéliser des jeux de cartes #  "},{"id":12,"href":"/modelisation/json/","title":"Modéliser en JSON","section":"Modéliser des jeux de cartes","content":"Modéliser en JSON #  "},{"id":13,"href":"/modelisation/java/","title":"Modéliser en Java","section":"Modéliser des jeux de cartes","content":"Modéliser en Java #  "},{"id":14,"href":"/efficacite/","title":"Qu'est-ce que l'efficacité?","section":"Code les cartes!","content":"Qu\u0026rsquo;est-ce que l\u0026rsquo;efficacité? #  "},{"id":15,"href":"/efficacite/temps/","title":"Efficacité en temps","section":"Qu'est-ce que l'efficacité?","content":"{{ page src=\u0026ldquo;theorie.example\u0026rdquo; skip-videos=\u0026ldquo;true\u0026rdquo; summary-only=\u0026ldquo;false\u0026rdquo; title-level=\u0026ldquo;1\u0026rdquo; }}\n"},{"id":16,"href":"/efficacite/espace/","title":"Efficacité en espace","section":"Qu'est-ce que l'efficacité?","content":"Efficacité en espace #  "},{"id":17,"href":"/listes/","title":"Comprendre les listes","section":"Code les cartes!","content":"Comprendre les listes #  "},{"id":18,"href":"/listes/tableau/","title":"Liste par tableau","section":"Comprendre les listes","content":"Liste par tableau #  "},{"id":19,"href":"/listes/chainee_simple/","title":"Liste chaînée simple","section":"Comprendre les listes","content":"Liste chaînée simple #  "},{"id":20,"href":"/listes/chainee_double/","title":"Liste chaînée double","section":"Comprendre les listes","content":"Liste chaînée double #  "},{"id":21,"href":"/arbres/","title":"Comprendre les arbres","section":"Code les cartes!","content":"Comprendre les arbres #  "},{"id":22,"href":"/arbres/generique/","title":"Arbre générique","section":"Comprendre les arbres","content":"Arbre générique #  "},{"id":23,"href":"/arbres/binaire/","title":"Arbre binaire","section":"Comprendre les arbres","content":"Arbre binaire #  "},{"id":24,"href":"/mappage/","title":"Comprendre les mappages","section":"Code les cartes!","content":"Comprendre les mappages #  "},{"id":25,"href":"/mappage/hachage/","title":"Mappage par fonction de hachage","section":"Comprendre les mappages","content":"Mappage par fonction de hachage #  "},{"id":26,"href":"/mappage/arbre/","title":"Mappage par arbre","section":"Comprendre les mappages","content":"Mappage par arbre #  "},{"id":27,"href":"/conclusion/","title":"Conclusion","section":"Code les cartes!","content":"Conclusion #  "},{"id":28,"href":"/grand-o/","title":"Annexe 1: la notation grand O","section":"Code les cartes!","content":"La notation grand O #  "},{"id":29,"href":"/modifier/","title":"Annexe 2: comment copier et modifier ce manuel","section":"Code les cartes!","content":"Comment modifier ce manuel #  Obtenir les sources #  Le source est ici: https://gitlab.com/mathieu-bergeron/codelescartes.ca\n  On peut télécharger les sources en .zip\n  Ou cloner le dépôt Git qui est public\n$ git clone https://gitlab.com/mathieu-bergeron/codelescartes.ca   Suggérer une modification #    Par courriel au mathieu.bergeron@cmontmorency.qc.ca\n  Via GitLab\n  «forker» le dépôt\n  dans votre dépôt, modifier directement les sources (sur GitLab ou en local après avoir cloné)\n  sauvegarder vos modifications (c-à-d faire un commit, suivi d\u0026rsquo;un push si vous travaillez en local)\n  SVP utiliser la branche main\n    ouvrir un «merge request» pour que le mainteneur de https://gitlab.com/mathieu-bergeron/codelescartes.ca soit averti de vos suggestions\n  SVP choisir votre branche main comme branche source et la branche main de mathieu-bergeron/codelescartes.ca comme branche cible\n      "}]